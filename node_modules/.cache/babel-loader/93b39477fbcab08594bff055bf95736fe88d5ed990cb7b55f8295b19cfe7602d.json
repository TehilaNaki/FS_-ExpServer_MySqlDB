{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tehila Naki\\\\Documents\\\\SE\\\\Y4\\\\FS\\\\Project6_Server\\\\project6\\\\src\\\\pages\\\\Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Link, Navigate, useParams, useNavigate } from \"react-router-dom\";\nimport \"../css/Posts.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Posts(_ref) {\n  _s();\n  let {\n    user\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [editedPost, setEditedPost] = useState(null);\n  const [editedComment, setEditedComment] = useState(null);\n  const [newPost, setNewPost] = useState({\n    title: \"\",\n    body: \"\"\n  });\n  const [newComment, setNewComment] = useState({\n    name: \"\",\n    email: \"\",\n    body: \"\"\n  });\n  const {\n    postId\n  } = useParams();\n  const navigate = useNavigate();\n  const postRef = useRef(null);\n  const [isAddingPost, setIsAddingPost] = useState(false);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\").then(response => response.json()).then(data => {\n      data = data.filter(p => p.userId === user.id);\n      setPosts(data);\n    }).catch(error => {\n      console.error(\"Error fetching posts:\", error);\n    });\n  }, [user]);\n  useEffect(() => {\n    // Scroll to the edited post when it's opened for editing\n    if (editedPost) {\n      postRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [editedPost]);\n  const newPostDraft = {\n    title: newPost.title,\n    body: newPost.body\n  };\n  const handleAddPost = () => {\n    setIsAddingPost(true);\n  };\n  const handleCommentsClick = postId => {\n    setSelectedPostId(postId);\n    fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`).then(response => response.json()).then(data => {\n      setComments(data);\n    }).catch(error => {\n      console.error(\"Error fetching comments:\", error);\n    });\n  };\n  const handleCloseCommentsClick = () => {\n    setSelectedPostId(null);\n  };\n  const handlePostClick = postId => {\n    navigate(`/Posts/${postId}`);\n  };\n  const handleEditPost = postId => {\n    const selectedPost = posts.find(post => post.id === postId);\n    setEditedPost(selectedPost);\n  };\n  const handleSavePost = () => {\n    if (editedPost) {\n      const updatedPosts = posts.map(post => {\n        if (post.id === editedPost.id) {\n          return editedPost;\n        }\n        return post;\n      });\n      setPosts(updatedPosts);\n      setEditedPost(null);\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditedPost(null);\n  };\n  const handleDeletePost = postId => {\n    const updatedPosts = posts.filter(post => post.id !== postId);\n    setPosts(updatedPosts);\n  };\n  const handleNewPostChange = e => {\n    setNewPost({\n      ...newPost,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSaveNewPost = () => {\n    const newPostWithId = {\n      ...newPost,\n      id: Math.floor(Math.random() * 1000) + 1,\n      userId: user.id\n    };\n    const updatedPosts = [...posts, newPostWithId];\n    setPosts(updatedPosts);\n    setNewPost({\n      title: \"\",\n      body: \"\"\n    });\n    setIsAddingPost(false);\n  };\n  const handleCancelAddPost = () => {\n    setIsAddingPost(false);\n  };\n  const handleAddComment = () => {\n    setIsAddingComment(true);\n  };\n  const handleSaveComment = () => {\n    if (editedComment) {\n      // Logic to save the edited comment\n      setEditedComment(null);\n    } else {\n      // Logic to save the new comment\n      const newCommentWithId = {\n        ...newComment,\n        id: Math.floor(Math.random() * 1000) + 1,\n        postId: selectedPostId\n      };\n      const updatedComments = [...comments, newCommentWithId];\n      setComments(updatedComments);\n      setNewComment({\n        name: \"\",\n        email: \"\",\n        body: \"\"\n      });\n      setIsAddingComment(false);\n    }\n  };\n  const handleCancelEditComment = () => {\n    setEditedComment(null);\n  };\n  const handleDeleteComment = commentId => {\n    const updatedComments = comments.filter(comment => comment.id !== commentId);\n    setComments(updatedComments);\n  };\n  const handleNewCommentChange = e => {\n    setNewComment({\n      ...newComment,\n      [e.target.name]: e.target.value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-container\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: post.id === (editedPost === null || editedPost === void 0 ? void 0 : editedPost.id) ? postRef : null,\n        className: postId === post.id ? \"selected-post post\" : \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), editedPost && editedPost.id === post.id ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: editedPost.body,\n          onChange: e => setEditedPost({\n            ...editedPost,\n            body: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this), selectedPostId === post.id && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Comments:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: editedComment && editedComment.id === comment.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                placeholder: \"Name\",\n                value: editedComment.name,\n                onChange: e => setEditedComment({\n                  ...editedComment,\n                  name: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                name: \"email\",\n                placeholder: \"Email\",\n                value: editedComment.email,\n                onChange: e => setEditedComment({\n                  ...editedComment,\n                  email: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                name: \"body\",\n                placeholder: \"Comment body\",\n                value: editedComment.body,\n                onChange: e => setEditedComment({\n                  ...editedComment,\n                  body: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSaveComment,\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleCancelEditComment,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Name: \", comment.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Email: \", comment.email]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: comment.body\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setEditedComment(comment),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteComment(comment.id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true)\n          }, comment.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 19\n          }, this)), isAddingComment ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              placeholder: \"Name\",\n              value: newComment.name,\n              onChange: handleNewCommentChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              name: \"email\",\n              placeholder: \"Email\",\n              value: newComment.email,\n              onChange: handleNewCommentChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"body\",\n              placeholder: \"Comment body\",\n              value: newComment.body,\n              onChange: handleNewCommentChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSaveComment,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setIsAddingComment(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddComment,\n            children: \"Add Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this), selectedPostId === post.id ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseCommentsClick,\n          children: \"Close Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleCommentsClick(post.id),\n          children: \"View Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }, this), editedPost && editedPost.id === post.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSavePost,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCancelEdit,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEditPost(post.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeletePost(post.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-post-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-post-button\",\n        onClick: handleAddPost,\n        children: \"Add Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), isAddingPost && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"New Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"title\",\n        placeholder: \"Post title\",\n        value: newPostDraft.title,\n        onChange: handleNewPostChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"body\",\n        placeholder: \"Post body\",\n        value: newPostDraft.body,\n        onChange: handleNewPostChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveNewPost,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancelAddPost,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(Posts, \"v/tXYqRndM2fH60Lp2/dlcyfsA4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","Navigate","useParams","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Posts","_ref","_s","user","posts","setPosts","selectedPostId","setSelectedPostId","comments","setComments","editedPost","setEditedPost","editedComment","setEditedComment","newPost","setNewPost","title","body","newComment","setNewComment","name","email","postId","navigate","postRef","isAddingPost","setIsAddingPost","isAddingComment","setIsAddingComment","fetch","then","response","json","data","filter","p","userId","id","catch","error","console","current","scrollIntoView","behavior","newPostDraft","handleAddPost","handleCommentsClick","handleCloseCommentsClick","handlePostClick","handleEditPost","selectedPost","find","post","handleSavePost","updatedPosts","map","handleCancelEdit","handleDeletePost","handleNewPostChange","e","target","value","handleSaveNewPost","newPostWithId","Math","floor","random","handleCancelAddPost","handleAddComment","handleSaveComment","newCommentWithId","updatedComments","handleCancelEditComment","handleDeleteComment","commentId","comment","handleNewCommentChange","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","onChange","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Tehila Naki/Documents/SE/Y4/FS/Project6_Server/project6/src/pages/Posts.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Link, Navigate, useParams, useNavigate } from \"react-router-dom\";\r\nimport \"../css/Posts.css\";\r\n\r\nfunction Posts({ user }) {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedPostId, setSelectedPostId] = useState(null);\r\n  const [comments, setComments] = useState([]);\r\n  const [editedPost, setEditedPost] = useState(null);\r\n  const [editedComment, setEditedComment] = useState(null);\r\n  const [newPost, setNewPost] = useState({ title: \"\", body: \"\" });\r\n  const [newComment, setNewComment] = useState({ name: \"\", email: \"\", body: \"\" });\r\n  const { postId } = useParams();\r\n  const navigate = useNavigate();\r\n  const postRef = useRef(null);\r\n  const [isAddingPost, setIsAddingPost] = useState(false);\r\n  const [isAddingComment, setIsAddingComment] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        data = data.filter((p) => p.userId === user.id);\r\n        setPosts(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching posts:\", error);\r\n      });\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the edited post when it's opened for editing\r\n    if (editedPost) {\r\n      postRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [editedPost]);\r\n\r\n  const newPostDraft = {\r\n    title: newPost.title,\r\n    body: newPost.body,\r\n  };\r\n\r\n  const handleAddPost = () => {\r\n    setIsAddingPost(true);\r\n  };\r\n\r\n  const handleCommentsClick = (postId) => {\r\n    setSelectedPostId(postId);\r\n\r\n    fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setComments(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching comments:\", error);\r\n      });\r\n  };\r\n\r\n  const handleCloseCommentsClick = () => {\r\n    setSelectedPostId(null);\r\n  };\r\n\r\n  const handlePostClick = (postId) => {\r\n    navigate(`/Posts/${postId}`);\r\n  };\r\n\r\n  const handleEditPost = (postId) => {\r\n    const selectedPost = posts.find((post) => post.id === postId);\r\n    setEditedPost(selectedPost);\r\n  };\r\n\r\n  const handleSavePost = () => {\r\n    if (editedPost) {\r\n      const updatedPosts = posts.map((post) => {\r\n        if (post.id === editedPost.id) {\r\n          return editedPost;\r\n        }\r\n        return post;\r\n      });\r\n      setPosts(updatedPosts);\r\n      setEditedPost(null);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditedPost(null);\r\n  };\r\n\r\n  const handleDeletePost = (postId) => {\r\n    const updatedPosts = posts.filter((post) => post.id !== postId);\r\n    setPosts(updatedPosts);\r\n  };\r\n\r\n  const handleNewPostChange = (e) => {\r\n    setNewPost({ ...newPost, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSaveNewPost = () => {\r\n    const newPostWithId = {\r\n      ...newPost,\r\n      id: Math.floor(Math.random() * 1000) + 1,\r\n      userId: user.id,\r\n    };\r\n    const updatedPosts = [...posts, newPostWithId];\r\n    setPosts(updatedPosts);\r\n    setNewPost({ title: \"\", body: \"\" });\r\n    setIsAddingPost(false);\r\n  };\r\n\r\n  const handleCancelAddPost = () => {\r\n    setIsAddingPost(false);\r\n  };\r\n\r\n  const handleAddComment = () => {\r\n    setIsAddingComment(true);\r\n  };\r\n\r\n  const handleSaveComment = () => {\r\n    if (editedComment) {\r\n      // Logic to save the edited comment\r\n      setEditedComment(null);\r\n    } else {\r\n      // Logic to save the new comment\r\n      const newCommentWithId = {\r\n        ...newComment,\r\n        id: Math.floor(Math.random() * 1000) + 1,\r\n        postId: selectedPostId,\r\n      };\r\n      const updatedComments = [...comments, newCommentWithId];\r\n      setComments(updatedComments);\r\n      setNewComment({ name: \"\", email: \"\", body: \"\" });\r\n      setIsAddingComment(false);\r\n    }\r\n  };\r\n\r\n  const handleCancelEditComment = () => {\r\n    setEditedComment(null);\r\n  };\r\n\r\n  const handleDeleteComment = (commentId) => {\r\n    const updatedComments = comments.filter((comment) => comment.id !== commentId);\r\n    setComments(updatedComments);\r\n  };\r\n\r\n  const handleNewCommentChange = (e) => {\r\n    setNewComment({ ...newComment, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"posts-container\">\r\n        {posts.map((post) => (\r\n          <div\r\n            key={post.id}\r\n            ref={post.id === editedPost?.id ? postRef : null}\r\n            className={postId === post.id ? \"selected-post post\" : \"post\"}\r\n          >\r\n            <h3>{post.title}</h3>\r\n            {editedPost && editedPost.id === post.id ? (\r\n              <textarea\r\n                value={editedPost.body}\r\n                onChange={(e) =>\r\n                  setEditedPost({ ...editedPost, body: e.target.value })\r\n                }\r\n              />\r\n            ) : (\r\n              <p>{post.body}</p>\r\n            )}\r\n            {selectedPostId === post.id && (\r\n              <div>\r\n                <h4>Comments:</h4>\r\n                {comments.map((comment) => (\r\n                  <div key={comment.id} className=\"comment\">\r\n                    {editedComment && editedComment.id === comment.id ? (\r\n                      <div>\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          placeholder=\"Name\"\r\n                          value={editedComment.name}\r\n                          onChange={(e) =>\r\n                            setEditedComment({\r\n                              ...editedComment,\r\n                              name: e.target.value,\r\n                            })\r\n                          }\r\n                        />\r\n                        <input\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          placeholder=\"Email\"\r\n                          value={editedComment.email}\r\n                          onChange={(e) =>\r\n                            setEditedComment({\r\n                              ...editedComment,\r\n                              email: e.target.value,\r\n                            })\r\n                          }\r\n                        />\r\n                        <textarea\r\n                          name=\"body\"\r\n                          placeholder=\"Comment body\"\r\n                          value={editedComment.body}\r\n                          onChange={(e) =>\r\n                            setEditedComment({\r\n                              ...editedComment,\r\n                              body: e.target.value,\r\n                            })\r\n                          }\r\n                        />\r\n                        <button onClick={handleSaveComment}>Save</button>\r\n                        <button onClick={handleCancelEditComment}>\r\n                          Cancel\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <>\r\n                        <p>Name: {comment.name}</p>\r\n                        <p>Email: {comment.email}</p>\r\n                        <p>{comment.body}</p>\r\n                        <button onClick={() => setEditedComment(comment)}>\r\n                          Edit\r\n                        </button>\r\n                        <button\r\n                          onClick={() => handleDeleteComment(comment.id)}\r\n                        >\r\n                          Delete\r\n                        </button>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n                {isAddingComment ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder=\"Name\"\r\n                      value={newComment.name}\r\n                      onChange={handleNewCommentChange}\r\n                    />\r\n                    <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder=\"Email\"\r\n                      value={newComment.email}\r\n                      onChange={handleNewCommentChange}\r\n                    />\r\n                    <textarea\r\n                      name=\"body\"\r\n                      placeholder=\"Comment body\"\r\n                      value={newComment.body}\r\n                      onChange={handleNewCommentChange}\r\n                    />\r\n                    <button onClick={handleSaveComment}>Save</button>\r\n                    <button onClick={() => setIsAddingComment(false)}>\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <button onClick={handleAddComment}>Add Comment</button>\r\n                )}\r\n              </div>\r\n            )}\r\n            {selectedPostId === post.id ? (\r\n              <button onClick={handleCloseCommentsClick}>Close Comments</button>\r\n            ) : (\r\n              <button onClick={() => handleCommentsClick(post.id)}>\r\n                View Comments\r\n              </button>\r\n            )}\r\n            {editedPost && editedPost.id === post.id ? (\r\n              <>\r\n                <button onClick={handleSavePost}>Save</button>\r\n                <button onClick={handleCancelEdit}>Cancel</button>\r\n              </>\r\n            ) : (\r\n              <button onClick={() => handleEditPost(post.id)}>Edit</button>\r\n            )}\r\n            <button onClick={() => handleDeletePost(post.id)}>Delete</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"add-post-container\">\r\n        <button className=\"add-post-button\" onClick={handleAddPost}>\r\n          Add Post\r\n        </button>\r\n      </div>\r\n\r\n      {isAddingPost && (\r\n        <div className=\"post\">\r\n          <h3>New Post</h3>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            placeholder=\"Post title\"\r\n            value={newPostDraft.title}\r\n            onChange={handleNewPostChange}\r\n          />\r\n          <textarea\r\n            name=\"body\"\r\n            placeholder=\"Post body\"\r\n            value={newPostDraft.body}\r\n            onChange={handleNewPostChange}\r\n          />\r\n          <button onClick={handleSaveNewPost}>Save</button>\r\n          <button onClick={handleCancelAddPost}>Cancel</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Posts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}